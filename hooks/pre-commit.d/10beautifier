#!/bin/sh

# NAME
#     beautifier
#
# DESCRIPTION
#     Subversion runs this script prior to a commit. If this script exits
#     with 0, the commit is performed, otherwise rejected.
#     Currently this script checks if
#     - a non-empty log message is provided
#     - source files comply to our coding standard, i.e. if they have
#       been beautified before the commit.
#
# ARGUMENTS
#     Subversion passes the following arguments to this script:
#       $1 REPOS-PATH   (the path to this repository)
#       $2 TXN-NAME     (the name of the transcation about to be committed)
#      ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#      ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#
# CONFIGURATION
#     As subversion runs with an empty environment, you need to specify
#     absolute paths to applications awk, ..., tail. See below.
#
# SEE ALSO
#     pre-commit.tmpl in the same directory
#
# AUTHORS
#     Christian Roessel <c.roessel@fz-juelich.de>
#     Markus Geimer <m.geimer@fz.juelich.de>

REPOS="$1"
TXN="$2"

BEAUTIFY=/usr/local/bin/uncrustify
DIFF=/usr/bin/diff
SVNLOOK=/usr/bin/svnlook

#### Coding standard validation: begin #########################################
# General idea:
# For all commit-candidates:
#     Compare the commit-candidate with a beautified version of the
#     commit-candidate. If they differ, reject the commit.

# pre-commit hook multiplexer has already filled this file
COMMIT_CANDIDATES=changed

# Retrieve each commit-candidate from the repository and compare it against
# the beautified version.
if [ -s $COMMIT_CANDIDATES ]; then

    # temporary files
    CANDIDATE=unbeautified
    CANDIDATE_BEAUTIFIED=beautified
    BEAUTIFY_CONFIG=beautify.cfg
    CANDIDATES_DIFFER=canditades_differ

    # Retrieve the beautifier config file from the common repository and store it
    # in a temporary file.
    $SVNLOOK cat /svn-base/common-root trunk/beautifier/beautify.cfg > $BEAUTIFY_CONFIG
    if [ $? -ne 0 ]; then
        echo "Commit rejected: Can't find file beautify.cfg in common repository." 1>&2
        echo "                 Please report this to the administrator." 1>&2
        exit 1
    fi

    old_IFS="$IFS"
    IFS=
    while read CANDIDATE_LINE; do

        # The path begins with the 5th character, therefore remove the first 4
        cand="${CANDIDATE_LINE#????}"

        # Only check common source code files
        case "$cand" in
        (*.c | *.h | *.cpp | *.hpp) : accept ;;
        (*) continue ;;
        esac

        SUFFIX=${cand##*.}
        $SVNLOOK cat $REPOS $cand --transaction $TXN > $CANDIDATE.$SUFFIX
        if [ ! -s $CANDIDATE.$SUFFIX ]; then # file is zero size
            rm $CANDIDATE.$SUFFIX
            continue
        fi

        # Generate expected result
        $BEAUTIFY -c $BEAUTIFY_CONFIG -f $CANDIDATE.$SUFFIX -o $CANDIDATE_BEAUTIFIED.$SUFFIX 1>&2
        if [ $? -ne 0 ]; then
            echo "Commit rejected: Can't run \"beautify\"." 1>&2
            echo "                 Please report this to the administrator." 1>&2
            exit 1
        fi

        # Compare expected result with commit canditate
        if ! $DIFF -u --label "unbeautified/$cand" --label "beautified/$cand" $CANDIDATE.$SUFFIX $CANDIDATE_BEAUTIFIED.$SUFFIX 1>&2; then
            $BEAUTIFY --version 1>&2
            echo "Commit rejected: File \"$cand\" does not comply to the coding standard." 1>&2
            echo "$cand" >> $CANDIDATES_DIFFER
        fi
    done < $COMMIT_CANDIDATES
    IFS="$old_IFS"

    if [ -s $CANDIDATES_DIFFER ]; then
        echo "Commit rejected: Please run \"make beautify\" and try again!" 1>&2
        exit 1
    fi
fi
#### Coding standard validation: end ###########################################
