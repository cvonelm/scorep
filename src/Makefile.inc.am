## -*- mode: makefile -*-

## 
## This file is part of the Score-P software (http://www.score-p.org)
##
## Copyright (c) 2009-2013,
##    RWTH Aachen University, Germany
##    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
##    Technische Universitaet Dresden, Germany
##    University of Oregon, Eugene, USA
##    Forschungszentrum Juelich GmbH, Germany
##    German Research School for Simulation Sciences GmbH, Juelich/Aachen, Germany
##    Technische Universitaet Muenchen, Germany
##
## See the COPYING file in the package base directory for details.
##

## file       Makefile.inc.am
## author     Christian Roessel <c.roessel@fz-juelich.de>
## maintainer Christian Roessel <c.roessel@fz-juelich.de>


noinst_LTLIBRARIES += libscorep_measurement.la
libscorep_measurement_la_SOURCES = 
libscorep_measurement_la_LIBADD = \
    libscorep_measurement_core.la \
    libscorep_timer.la        \
    libscorep_metric.la       \
    libscorep_profile.la      \
    libscorep_tracing.la      \
    libscorep_definitions.la  \
    libscorep_platform.la     \
    libscorep_bitstring.la    \
    libscorep_filter.la       \
    libscorep_allocator.la    \
    libscorep_vector.la       \
    libscorep_hashtab.la      \
    libutils.la               \
    libjenkins_hash.la        \
    @OTF2_LIBS@               \
    @LIBBFD_LIBS@             \
    @SCOREP_PAPI_LIBS@        \
    @CUBE_WRITER_LIBS@        \
    @TIMER_LIB@

if HAVE_CUDA
libscorep_measurement_la_LIBADD += libscorep_cuda.la
endif

libscorep_measurement_la_LDFLAGS = \
    @OTF2_LDFLAGS@        \
    @LIBBFD_LDFLAGS@      \
    @SCOREP_PAPI_LDFLAGS@ \
    @CUBE_WRITER_LDFLAGS@ \
    @CUDA_LDFLAGS@

common_libadd = \
    libscorep_measurement.la         \
    libscorep_adapter_compiler.la    \
    libscorep_adapter_user.la        \
    libscorep_adapter_pomp_common.la

common_cppflags = $(AM_CPPFLAGS)                       \
                  -I$(INC_ROOT)src/adapters/include    \
                  -I$(INC_ROOT)src/services/include    \
                  -I$(INC_ROOT)src/measurement/include \
                  -I$(INC_ROOT)src/measurement         \
                  -I$(PUBLIC_INC_DIR)                  \
                  $(UTILS_CPPFLAGS)

library_api_version_ldflags  = -version-info @LIBRARY_INTERFACE_VERSION@

## MPI

if HAVE_MPI_SUPPORT

$(LIB_DIR_SCOREP_MPI)libscorep_adapter_mpi.la:
	@$(am__cd) $(LIB_DIR_SCOREP_MPI) && $(MAKE) $(AM_MAKEFLAGS) libscorep_adapter_mpi.la

$(LIB_DIR_SCOREP_MPI)libscorep_ipc_mpi.la:
	@$(am__cd) $(LIB_DIR_SCOREP_MPI) && $(MAKE) $(AM_MAKEFLAGS) libscorep_ipc_mpi.la

$(LIB_DIR_SCOREP_MPI)libscorep_sion_mpp_mpi.la:
	@$(am__cd) $(LIB_DIR_SCOREP_MPI) && $(MAKE) $(AM_MAKEFLAGS) libscorep_sion_mpp_mpi.la

$(LIB_DIR_SCOREP_MPI)libscorep_online_access_mpp_mpi.la:
	@$(am__cd) $(LIB_DIR_SCOREP_MPI) && $(MAKE) $(AM_MAKEFLAGS) libscorep_online_access_mpp_mpi.la


lib_LTLIBRARIES                      += libscorep_mpi.la
libscorep_mpi_la_SOURCES              = $(SRC_ROOT)src/measurement/paradigm/scorep_adapter_libscorep_mpi.c \
                                        $(SRC_ROOT)src/adapters/pomp/SCOREP_Pomp_Dummy.c
# multilib: remove SCOREP_Pomp_Dummy.c and provide
# POMP2_Init_regions(), POMP2_Get_num_regions(), and
# POMP2_Get_opari2_version() by the instrumenter's nm-step
nodist_EXTRA_libscorep_mpi_la_SOURCES = force_link_with_F77LD.f
libscorep_mpi_la_CPPFLAGS             = $(common_cppflags)
libscorep_mpi_la_LIBADD               = $(common_libadd)                               \
                                        $(LIB_DIR_SCOREP_MPI)libscorep_adapter_mpi.la  \
                                        $(LIB_DIR_SCOREP_MPI)libscorep_ipc_mpi.la      \
                                        $(LIB_DIR_SCOREP_MPI)libscorep_sion_mpp_mpi.la \
                                        $(LIB_DIR_SCOREP_MPI)libscorep_online_access_mpp_mpi.la \
                                        libscorep_adapter_pomp_user.la                 \
                                        libscorep_thread_mockup.la                     \
                                        libscorep_mutex_mockup.la                      \
                                        libscorep_mpp_ipc.la
libscorep_mpi_la_LDFLAGS              = $(library_api_version_ldflags)

endif              		

## Serial

lib_LTLIBRARIES             += libscorep_serial.la
libscorep_serial_la_SOURCES  = $(SRC_ROOT)src/measurement/paradigm/scorep_adapter_libscorep_serial.c \
                               $(SRC_ROOT)src/adapters/pomp/SCOREP_Pomp_Dummy.c
# multilib: remove SCOREP_Pomp_Dummy.c and provide  
# POMP2_Init_regions(), POMP2_Get_num_regions(), and 
# POMP2_Get_opari2_version() by the instrumenter's nm-step
libscorep_serial_la_CPPFLAGS = $(common_cppflags)
libscorep_serial_la_LIBADD   = $(common_libadd)               \
                               libscorep_adapter_pomp_user.la \
                               libscorep_mpp_mockup.la        \
                               libscorep_thread_mockup.la     \
                               libscorep_mutex_mockup.la      \
                               libscorep_sion_mockup.la       \
                               libscorep_online_access_spp.la
libscorep_serial_la_LDFLAGS  = $(library_api_version_ldflags)

## OpenMP

if HAVE_OPENMP_SUPPORT
lib_LTLIBRARIES          += libscorep_omp.la
libscorep_omp_la_SOURCES  = $(SRC_ROOT)src/measurement/paradigm/scorep_adapter_libscorep_omp.c
libscorep_omp_la_CFLAGS   = $(AM_CFLAGS) $(OPENMP_CFLAGS)
libscorep_omp_la_CPPFLAGS = $(common_cppflags)
libscorep_omp_la_LIBADD   = $(common_libadd)              \
                            libscorep_adapter_pomp_user.la \
                            libscorep_adapter_pomp_omp.la \
                            libscorep_mpp_mockup.la       \
                            libscorep_thread_generic.la   \
                            libscorep_thread_omp_tpd.la   \
                            libscorep_mutex_omp.la        \
                            libscorep_sion_mockup.la      \
                            libscorep_online_access_spp.la
libscorep_omp_la_LDFLAGS  = $(library_api_version_ldflags)

endif

## Hybrid

if HAVE_MPI_SUPPORT
if HAVE_OPENMP_SUPPORT

lib_LTLIBRARIES                          += libscorep_mpi_omp.la
libscorep_mpi_omp_la_SOURCES              = $(SRC_ROOT)src/measurement/paradigm/scorep_adapter_libscorep_mpi_omp.c
nodist_EXTRA_libscorep_mpi_omp_la_SOURCES = force_link_with_F77LD.f
libscorep_mpi_omp_la_CFLAGS               = $(AM_CFLAGS) $(OPENMP_CFLAGS)
libscorep_mpi_omp_la_CPPFLAGS             = $(common_cppflags)
libscorep_mpi_omp_la_LIBADD               = $(common_libadd)                               \
                                            $(LIB_DIR_SCOREP_MPI)libscorep_adapter_mpi.la  \
                                            $(LIB_DIR_SCOREP_MPI)libscorep_ipc_mpi.la      \
                                            $(LIB_DIR_SCOREP_MPI)libscorep_online_access_mpp_mpi.la \
                                            libscorep_adapter_pomp_user.la                 \
                                            libscorep_adapter_pomp_omp.la                  \
                                            libscorep_thread_generic.la                    \
                                            libscorep_thread_omp_tpd.la                    \
                                            libscorep_mutex_omp.la                         \
                                            libscorep_mpp_ipc.la                           \
                                            libscorep_sion_mockup.la
libscorep_mpi_omp_la_LDFLAGS              = $(library_api_version_ldflags)

endif
endif
