/*
 * This file is part of the SILC project (http://www.silc.de)
 *
 * Copyright (c) 2009-2011,
 *    RWTH Aachen, Germany
 *    Gesellschaft fuer numerische Simulation mbH Braunschweig, Germany
 *    Technische Universitaet Dresden, Germany
 *    University of Oregon, Eugene USA
 *    Forschungszentrum Juelich GmbH, Germany
 *    Technische Universitaet Muenchen, Germany
 *
 * See the COPYING file in the package base directory for details.
 *
 */

#ifndef POMP_LIB_H
#define POMP_LIB_H

/**
 * @file       pomp_lib.h
 * @maintainer Daniel Lorenz <d.lorenz@fz-juelich.de>
 * @status     ALPHA
 * @ingroup    POMP
 *
 * @brief Declares public visible items of the POMP adapter.
 */

#include <stddef.h>
#include <omp.h>

#include "SILC_Adapter.h"

#ifdef __cplusplus
extern "C" {
#endif

/** Defines opaque pomp region handle type */
typedef void* POMP_Region_handle;

/** The POMP adapter struct */
extern struct SILC_Adapter SILC_Pomp_Adapter;

/** @name Functions generated by the instrumenter */
/*@{*/
/**
 * Returns the number of instrumented regions.@n
 * The instrumenter scans all opari-created include files with nm and greps
 * the POMP_INIT_uuid_numRegions() function calls. Here we return the sum of
 * all numRegions.
 */
extern size_t
POMP_Get_num_regions();

/**
 * Init all opari-created regions.@n
 * The instrumentor scans all opari-created include files with nm and greps
 * the POMP_INIT_uuid_numRegions() function calls. The instrumentor then
 * defines this functions by calling all grepped functions.
 */
extern void
POMP_Init_regions();

/*@}*/

extern void
POMP_Finalize();
extern void
POMP_Init();
extern void
POMP_Off();
extern void
POMP_On();
extern void
POMP_Begin( POMP_Region_handle pomp_handle );
extern void
POMP_End( POMP_Region_handle pomp_handle );
extern void
POMP_Assign_handle( POMP_Region_handle* pomp_handle,
                    const char          ctc_string[] );

#ifdef _OPENMP
extern void
POMP_Atomic_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Atomic_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Barrier_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Barrier_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Flush_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Flush_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Critical_begin( POMP_Region_handle pomp_handle );
extern void
POMP_Critical_end( POMP_Region_handle pomp_handle );
extern void
POMP_Critical_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Critical_exit( POMP_Region_handle pomp_handle );
extern void
POMP_For_enter( POMP_Region_handle pomp_handle );
extern void
POMP_For_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Master_begin( POMP_Region_handle pomp_handle );
extern void
POMP_Master_end( POMP_Region_handle pomp_handle );
extern void
POMP_Parallel_begin( POMP_Region_handle pomp_handle );
extern void
POMP_Parallel_end( POMP_Region_handle pomp_handle );
extern void
POMP_Parallel_fork( POMP_Region_handle pomp_handle );
extern void
POMP_Parallel_join( POMP_Region_handle pomp_handle );
extern void
POMP_Section_begin( POMP_Region_handle pomp_handle );
extern void
POMP_Section_end( POMP_Region_handle pomp_handle );
extern void
POMP_Sections_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Sections_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Single_begin( POMP_Region_handle pomp_handle );
extern void
POMP_Single_end( POMP_Region_handle pomp_handle );
extern void
POMP_Single_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Single_exit( POMP_Region_handle pomp_handle );
extern void
POMP_Workshare_enter( POMP_Region_handle pomp_handle );
extern void
POMP_Workshare_exit( POMP_Region_handle pomp_handle );

extern void
POMP_Init_lock( omp_lock_t* s );
extern void
POMP_Destroy_lock( omp_lock_t* s );
extern void
POMP_Set_lock( omp_lock_t* s );
extern void
POMP_Unset_lock( omp_lock_t* s );
extern int
POMP_Test_lock( omp_lock_t* s );
extern void
POMP_Init_nest_lock( omp_nest_lock_t* s );
extern void
POMP_Destroy_nest_lock( omp_nest_lock_t* s );
extern void
POMP_Set_nest_lock( omp_nest_lock_t* s );
extern void
POMP_Unset_nest_lock( omp_nest_lock_t* s );
extern int
POMP_Test_nest_lock( omp_nest_lock_t* s );

#endif /* _OPENMP */

#ifdef __cplusplus
}
#endif

#endif
