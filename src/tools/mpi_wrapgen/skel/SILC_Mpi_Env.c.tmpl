/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
**  KOJAK       http://www.fz-juelich.de/jsc/kojak/                        **
*****************************************************************************
**  Copyright (c) 1998-2009                                                **
**  Forschungszentrum Juelich, Juelich Supercomputing Centre               **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/

/**
 * @file  SILC_Mpi_Env.c
 *
 * @brief C interface wrappers for environmental management
 */

/**
 * @name C wrappers
 * @{
 */

/**
 * Measurement wrapper for MPI_Init
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup env
 */
int MPI_Init(int* argc, char*** argv )
{
  int            event_gen_active = 0; /* init is deferred to later */
  int            return_val, numprocs, i;
  unsigned char* grpv;
  int            fflag;
  static int     already_opened = 0;

  /* esd_open calls silc_mpi_register(), so we have to defer the setting
   * of this test to now */
  event_gen_active = SILC_MPI_IS_EVENT_GEN_ON_FOR(ENV);

  if (event_gen_active)
  {
    SILC_MPI_EVENT_GEN_OFF();
    if (!already_opened)
    {
      /* Initialize the measurement system */
      SILC_InitMeasurement();
      already_opened = 1;

      /* Enter global MPI region */
      SILC_EnterRegion(silc_mpi_regid[SILC_PARALLEL__MPI]);
    }
    /* Enter the init region */
    SILC_EnterRegion(silc_mpi_regid[SILC__MPI_INIT]);
  }

  return_val = PMPI_Init(argc, argv);

  /* XXXX should only continue if MPI initialised OK! */

  if ((PMPI_Finalized(&fflag) == MPI_SUCCESS) && (fflag == 0))
  {
    PMPI_Comm_size(MPI_COMM_WORLD, &numprocs);

    /* define communicator for MPI_COMM_WORLD */
    grpv =
      calloc(numprocs / 8 + (numprocs % 8 ? 1 : 0), sizeof(unsigned char));
    for (i = 0; i < numprocs; i++)
    {
      grpv[i / 8] |= (1 << (i % 8));
    }
    SILC_DefineMPICommunicator(0, grpv, numprocs / 8 + (numprocs % 8 ? 1 : 0) );

    free(grpv);

    /* initialize communicator management */
    silc_mpi_comm_init();

    /* complete initialization of measurement core and MPI event handling */
    SILC_InitMeasurementMPI();
    silc_mpi_comm_determination = 1;
  }

  if (event_gen_active)
  {
    SILC_ExitRegion(silc_mpi_regid[SILC__MPI_INIT]);
    SILC_MPI_EVENT_GEN_ON();
  }

  return return_val;
}

#if defined(HAS_MPI2_COLLECTIVES)
/**
 * Measurement wrapper for MPI_Init_thread, the thread-capable
 * alternative to MPI_Init.
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
int MPI_Init_thread(int* argc, char*** argv, int required, int* provided )
{
  int            event_gen_active = 0;
  int            return_val, numprocs, i;
  unsigned char* grpv;
  int            fflag;
  int            already_opened;

  /* open output files and return whether the files had been opened
   * elsewhere in the measurement */
  already_opened = esd_open();
  /* esd_open calls silc_mpi_register(), so we have to defer the setting
   * of this test to now */
  event_gen_active = SILC_MPI_IS_EVENT_GEN_ON_FOR(ENV);

  if (event_gen_active)
  {
    SILC_MPI_EVENT_GEN_OFF();
    if (!already_opened)
    {
      SILC_EnterRegion(silc_mpi_regid[SILC_PARALLEL__MPI]);
    }
    SILC_EnterRegion(silc_mpi_regid[SILC__MPI_INIT_THREAD]);
  }

  return_val = PMPI_Init_thread(argc, argv, required, provided);

  /* XXXX should only continue if MPI initialised OK! */

  if ((return_val == MPI_SUCCESS) && (*provided > MPI_THREAD_FUNNELED))
  {
    elg_warning(
      "MPI environment initialized with level exceeding MPI_THREAD_FUNNELED!");
    /* XXXX continue even though not supported by analysis */
  }

  if ((PMPI_Finalized(&fflag) == MPI_SUCCESS) && (fflag == 0))
  {
    PMPI_Comm_size(MPI_COMM_WORLD, &numprocs);

    /* define communicator for MPI_COMM_WORLD */
    grpv =
      calloc(numprocs / 8 + (numprocs % 8 ? 1 : 0), sizeof(unsigned char));
    for (i = 0; i < numprocs; i++)
    {
      grpv[i / 8] |= (1 << (i % 8));
    }
    SILC_DefineMPICommunicator(0, grpv, numprocs / 8 + (numprocs % 8 ? 1 : 0) );

    free(grpv);

    /* initialize communicator management */
    silc_mpi_comm_init();

    /* complete initialization of measurement core and MPI event handling */
    
    /* silc_mpi_comm_determination = esd_mpi_init();*/
    SILC_InitMeasurementMPI();
    silc_mpi_determination = 1;
  }

  if (event_gen_active)
  {
    SILC_ExitRegion(silc_mpi_regid[SILC__MPI_INIT_THREAD]);
    SILC_MPI_EVENT_GEN_ON();
  }

  return return_val;
}
#endif

/**
 * Measurement wrapper for MPI_Finalize
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup env
 */
int MPI_Finalize()
{
  const int event_gen_active = SILC_MPI_IS_EVENT_GEN_ON_FOR(ENV);
  int       return_val;

  if (event_gen_active)
  {
    SILC_MPI_EVENT_GEN_OFF();
    SILC_EnterRegion(silc_mpi_regid[SILC__MPI_FINALIZE]);
  }

  /* finalize communicator and request management */
  silc_mpi_comm_finalize();
  silc_request_finalize();

  /* finalize MPI event handling */
  esd_mpi_finalize();

  /* fake finalization, so that MPI can be used during EPIK finalization */
  return_val = PMPI_Barrier(MPI_COMM_WORLD);

  if (event_gen_active)
  {
    SILC_ExitRegion(silc_mpi_regid[SILC__MPI_FINALIZE]);
    SILC_MPI_EVENT_GEN_ON();
  }

  return return_val;
}

#pragma wrapgen multiple restrict(genv+!nMPI_Init+!nMPI_Init_thread+!nMPI_Finalize) skel/SILC_Mpi_Std.w

/**
 * @}
 */
