/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
**  KOJAK       http://www.fz-juelich.de/jsc/kojak/                        **
*****************************************************************************
**  Copyright (c) 1998-2009                                                **
**  Forschungszentrum Juelich, Juelich Supercomputing Centre               **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/

/**
 * @file  SILC_Mpi_Rma.c
 *
 * @brief C interface wrappers for one-sided communication
 */

#include "epk_mpicom.h"
#include "esd_event.h"

/** internal id counter for rma operations */
static int epk_rma_id = 0;

/** current rma id to use in event generation */
#define EPK_CURR_RMA_ID   epk_rma_id
/** increment and get rma id to use in event generation */
#define EPK_NEXT_RMA_ID ++epk_rma_id

/**
 * @name C wrappers for access functions
 * @{
 */
#pragma wrapgen single MPI_Accumulate skel/SILC_Mpi_RmaPut.w

/**
 * Measurement wrapper for MPI_Get
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Get(void*        origin_addr,
            int          origin_count,
            MPI_Datatype origin_datatype,
            int          target_rank,
            MPI_Aint     target_disp,
            int          target_count,
            MPI_Datatype target_datatype,
            MPI_Win      win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    int     sendsz;
    elg_ui4 dpid;
    elg_ui4 wid;

    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_GET]);

    dpid = epk_win_rank_to_pe( target_rank, win );
    wid = epk_win_id( win );
    
    /* in MPI_GET the target buffer is remote */
    PMPI_Type_size(target_datatype, &sendsz);
    esd_mpi_get_1ts_remote(dpid, wid, EPK_NEXT_RMA_ID, target_count * sendsz);
    
    return_val = PMPI_Get( origin_addr, origin_count, 
                  origin_datatype, target_rank, target_disp,
                  target_count, target_datatype, win );

    /* in MPI_GET the origin buffer is local */
    esd_mpi_get_1te( dpid, wid, EPK_CURR_RMA_ID);

    esd_exit(epk_mpi_regid[EPK__MPI_GET]);

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Get(origin_addr, origin_count, 
                  origin_datatype, target_rank, target_disp,
                  target_count, target_datatype, win);
  }

  return return_val;
}

#pragma wrapgen single MPI_Put skel/SILC_Mpi_RmaPut.w

/**
 * @}
 * @name C wrappers for window management functions
 * @{
 */

/**
 * Measurement wrapper for MPI_Win_create
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_create(void*    base,
                   MPI_Aint size,
                   int      disp_unit,
                   MPI_Info info, 
                   MPI_Comm comm,
                   MPI_Win* win) 
{
  const int event_gen_active = IS_EVENT_GEN_ON_FOR(RMA); 
  int       return_val;

  if (event_gen_active)
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_CREATE]);
  }
      
  return_val = PMPI_Win_create(base, size, disp_unit,
                info, comm, win );

  if (*win != MPI_WIN_NULL)
  {
    epk_win_create( *win, comm );
  }

  if (event_gen_active)
  {
    esd_mpi_wincollexit(epk_mpi_regid[EPK__MPI_WIN_CREATE], epk_win_id(*win));
    
    EVENT_GEN_ON();
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_free
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_free(MPI_Win* win) 
{
  const int event_gen_active = IS_EVENT_GEN_ON_FOR(RMA); 
  int       return_val;
  elg_ui4   wid;

  if (event_gen_active)
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_FREE]);

    wid = epk_win_id(*win);
  }
      
  epk_win_free(*win);
  return_val = PMPI_Win_free( win );

  if (event_gen_active)
  {
    esd_mpi_wincollexit(epk_mpi_regid[EPK__MPI_WIN_FREE], wid);
    
    EVENT_GEN_ON();
  }

  return return_val;
}

/**
 * @}
 * @name C wrappers for synchonization functions
 * @{
 */

/**
 * Measurement wrapper for MPI_Win_complete
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_complete(MPI_Win win) 
{ 
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_COMPLETE]);

    return_val = PMPI_Win_complete(win);

    esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_COMPLETE],
                    epk_win_id(win), epk_winacc_get_gid(win, 1), 1);
    epk_winacc_end(win, 1);

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_complete(win);
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_fence
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_fence(int     assert,
                  MPI_Win win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_FENCE]);

    return_val = PMPI_Win_fence(assert, win);

    esd_mpi_wincollexit(epk_mpi_regid[EPK__MPI_WIN_FENCE], epk_win_id(win));
    
    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_fence(assert, win);
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_lock
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_lock(int     lock_type,
                 int     rank,
                 int     assert,
                 MPI_Win win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_LOCK]);

    esd_mpi_win_lock( rank, epk_win_id(win), lock_type==MPI_LOCK_EXCLUSIVE);
    return_val = PMPI_Win_lock( lock_type, rank, 
                      assert, win );

    esd_exit(epk_mpi_regid[EPK__MPI_WIN_LOCK]);

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_lock( lock_type, rank, 
                      assert, win );
  }
  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_post
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_post(MPI_Group group,
                 int       assert,
                 MPI_Win   win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_POST]);

    epk_winacc_start(win, group, 0);
    return_val = PMPI_Win_post(group, assert, win);

    esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_POST],
                    epk_win_id(win), epk_winacc_get_gid(win, 0), 0);
    
    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_post(group, assert, win);
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_start
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_start(MPI_Group group,
                  int       assert,
                  MPI_Win   win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_START]);

    epk_winacc_start(win, group, 1);
    return_val = PMPI_Win_start(group, assert, win);

    esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_START],
                    epk_win_id(win), epk_winacc_get_gid(win, 1), 0);
    
    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_start(group, assert, win);
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_test
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_test(MPI_Win win,
                 int*    flag) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_TEST]);

    return_val = PMPI_Win_test(win, flag);
    
    if (*flag != 0) 
    {
      esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_TEST],
                      epk_win_id(win), epk_winacc_get_gid(win, 0), 1);
      epk_winacc_end(win, 0);
    }
    else
    {
      esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_TEST],
                      epk_win_id(win), epk_winacc_get_gid(win, 0), 0);
	  }

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_test(win, flag);
  }

  return return_val;
}

/**
 * Measurement wrapper for MPI_Win_unlock
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_unlock(int     rank,
                   MPI_Win win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_UNLOCK]);

    return_val = PMPI_Win_unlock(rank, win);
    esd_mpi_win_unlock(rank, epk_win_id(win));
    
    esd_exit(epk_mpi_regid[EPK__MPI_WIN_UNLOCK]);

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_unlock(rank, win);
  }

  return return_val;
}


/**
 * Measurement wrapper for MPI_Win_wait
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup rma
 */
int MPI_Win_wait(MPI_Win win) 
{
  int return_val;

  if (IS_EVENT_GEN_ON_FOR(RMA))
  {
    EVENT_GEN_OFF();

    esd_enter(epk_mpi_regid[EPK__MPI_WIN_WAIT]);

    return_val = PMPI_Win_wait(win);

    esd_mpi_winexit(epk_mpi_regid[EPK__MPI_WIN_WAIT],
                    epk_win_id(win), epk_winacc_get_gid(win, 0), 1);
    epk_winacc_end(win, 0);

    EVENT_GEN_ON();
  }
  else
  {
    return_val = PMPI_Win_wait(win);
  }

  return return_val;
}

/**
 * @}
 * @name C wrappers for error handling functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_err)  skel/SILC_Mpi_Std.w

/**
 * @}
 * @name C wrappers for external interface functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_ext)  skel/SILC_Mpi_Std.w

/**
 * @}
 * @name C wrappers for handle conversion functions
 * @{
 */
#pragma wrapgen multiple restrict(grma_misc+!n_c2f+!n_f2c) skel/SILC_Mpi_Std.w

/**
 * @}
 */
