/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
**  KOJAK       http://www.fz-juelich.de/jsc/kojak/                        **
*****************************************************************************
**  Copyright (c) 1998-2009                                                **
**  Forschungszentrum Juelich, Juelich Supercomputing Centre               **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/

/**
 * @file  SILC_Mpi.c
 * @brief Main file for C interface measurement wrappers
 */

#include "SILC_Mpi_Com.h"
#include "SILC_Mpi_Reg.h"

#include "SILC_Error.h"

#include "SILC_Definitions.h"
#include "SILC_Events.h"
#include "SILC_RuntimeManagement.h"

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

/** internal array of statuses */
static MPI_Status* silc_my_status_array = 0;
/** size of internal status array */
static int         silc_my_status_array_size = 0;

/**
 * Get a pointer to a status array of at least 'size' statuses
 * @param  size minimal requested size
 * @return pointer to status array
 * @ingroup util
 */
static MPI_Status* silc_get_status_array(int size) {
  if (silc_my_status_array_size == 0)
  {
    /* -- never used: initialize -- */
    silc_my_status_array = malloc(size * sizeof(MPI_Status));
    if (silc_my_status_array == NULL) SILC_ERROR_POSIX();
    silc_my_status_array_size = size;
  } 
  else if (size > silc_my_status_array_size)
  {
    /* -- not enough room: expand -- */
    silc_my_status_array = realloc(silc_my_status_array, size * sizeof(MPI_Status));
    if (silc_my_status_array == NULL) SILC_ERROR_POSIX();
    silc_my_status_array_size = size;
  }
  return silc_my_status_array;
}

/** Flag to indicate whether event generation is turned on or off. If it is set to 0,
    events are generated. If it is set to non-zero, no events are generated.
 */
int silc_mpi_nogen = 0;

/** Check whether event generation is turned on. Returns the inverse value of 
    silc_mpi_nogen
 */
#define SILC_MPI_IS_EVENT_GEN_ON            (!silc_mpi_nogen)

/** Check whether event generation is turned on for a specific group.
 */
#define SILC_MPI_IS_EVENT_GEN_ON_FOR(group) ((!silc_mpi_nogen) && \
        (silc_mpi_enabled & SILC_MPI_ENABLED_##group))


/** turn off event generation */
#define SILC_MPI_EVENT_GEN_OFF()            silc_mpi_nogen = 1

/** turn on event generation */
#define SILC_MPI_EVENT_GEN_ON()             silc_mpi_nogen = 0

/*
 *-----------------------------------------------------------------------------
 *
 * name Environmental Management
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Env.c"

/*
 *-----------------------------------------------------------------------------
 *
 * External interfaces
 * 
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Ext.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Datatypes
 * 
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Type.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Miscelaneous
 * 
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Misc.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Communicator management
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Cg.c"

/* 
 *-----------------------------------------------------------------------------
 *
 * Cartesian Toplogy functions
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Topo.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Point-to-point communication
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_P2p.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Collective communication
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Coll.c"

/*
 *-----------------------------------------------------------------------------
 *
 * One-sided Communication
 *
 *-----------------------------------------------------------------------------
 */

#ifdef HAS_MPI2_1SIDED
#include "SILC_Mpi_Rma.c"
#endif

/*
 *-----------------------------------------------------------------------------
 *
 * Parallel I/O
 *
 *-----------------------------------------------------------------------------
 */
#ifdef HAS_MPI2_IO
#include "SILC_Mpi_Io.c"
#endif

/*
 *-----------------------------------------------------------------------------
 *
 * Process Creation and Management
 *
 *-----------------------------------------------------------------------------
 */

#ifdef HAS_MPI2_SPAWN
#include "SILC_Mpi_Spawn.c"
#endif

/*
 *-----------------------------------------------------------------------------
 *
 * Error Handlers
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Err.c"
