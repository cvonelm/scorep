#!/bin/sh

# NAME
#     pre-commit
#
# DESCRIPTION
#     Subversion runs this script prior to a commit. If this script exits
#     with 0, the commit is performed, otherwise rejected.
#     Currently this script checks if
#     - a non-empty log message is provided
#     - source files comply to our coding standard, i.e. if they have
#       been beautified before the commit.
#
# ARGUMENTS
#     Subversion passes the following arguments to this script:
#       $1 REPOS-PATH   (the path to this repository)
#       $2 TXN-NAME     (the name of the transcation about to be committed)
#      ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#      ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#
# CONFIGURATION
#     As subversion runs with an empty environment, you need to specify
#     absolute paths to applications awk, ..., tail. See below.
#
# SEE ALSO
#     pre-commit.tmpl in the same directory
#
# AUTHORS
#     Christian Roessel <c.roessel@fz-juelich.de>
#     Markus Geimer <m.geimer@fz.juelich.de>

REPOS="$1"
TXN="$2"

AWK=/usr/bin/awk
BEAUTIFY=/usr/local/bin/uncrustify
COMPARE=/usr/bin/cmp
DIFF=/usr/bin/diff
GREP=/usr/bin/grep
SVNLOOK=/usr/bin/svnlook
TAIL=/usr/bin/tail

#### Log message check: begin ##################################################
# Log message must contain some text
$SVNLOOK log -t "$TXN" "$REPOS" | grep "[a-zA-Z0-9]" > /dev/null
if [ $? -ne 0 ]; then
    echo "Commit rejected: Please provide a meaningful commit message and try again." 1>&2
    exit 1
fi
#### Log message check: end ####################################################


#### Coding standard validation: begin #########################################
# General idea:
# For all commit-candidates:
#     Compare the commit-candidate with a beautified version of the
#     commit-candidate. If they differ, reject the commit.

COMMIT_CANDIDATES=`$SVNLOOK changed $REPOS --transaction $TXN |                \
                  $AWK '{print $2}' | $GREP -e '\.c$\|\.h$\|\.cpp$\|\.hpp$'`
if [ -n "$COMMIT_CANDIDATES" ]; then

    # temporary files
    CANDIDATE=/tmp/unbeautified.$$
    CANDIDATE_BEAUTIFIED=/tmp/beautified.$$
    BEAUTIFY_CONFIG=/tmp/beautify.$$.cfg

    # Retrieve the beautifier config file from the repository and store it
    # in a temporary file. The location in the repository is relative to
    # $TOP_DIR, which we assume is out of (trunk|branches/FOO|tags/BAR).
    TOP_DIR=`$SVNLOOK changed $REPOS --transaction $TXN | $TAIL -n 1 |         \
             $AWK '{print $2}' |                                               \
             $AWK -F "/" '{if ($1=="trunk") {print $1} else {print $1 FS $2}}'`
    BEAUTIFY_DIR="$TOP_DIR"/tools/beautifier
    BEAUTIFY_CONFIG_IN_REPOS="$BEAUTIFY_DIR"/beautify.cfg
    $SVNLOOK cat $REPOS $BEAUTIFY_CONFIG_IN_REPOS > $BEAUTIFY_CONFIG
    if [ $? -ne 0 ]; then
        echo "Commit rejected: Can't find file \"$BEAUTIFY_CONFIG_IN_REPOS\"." 1>&2
        echo "                 Please check your pre-commit hook script." 1>&2
        exit 1
    fi

    # Retrieve each commit-candidate from the repository and compare it against
    # the beautified version.
    DIFFER=
    for cand in $COMMIT_CANDIDATES; do
        SUFFIX=${cand##*.}
        $SVNLOOK cat $REPOS $cand --transaction $TXN > $CANDIDATE.$SUFFIX
        if [ ! -s $CANDIDATE.$SUFFIX ]; then # file is zero size
            rm $CANDIDATE.$SUFFIX
            continue
        fi
        $BEAUTIFY -c $BEAUTIFY_CONFIG -f $CANDIDATE.$SUFFIX -o $CANDIDATE_BEAUTIFIED.$SUFFIX 1>&2
        if ! $COMPARE $CANDIDATE.$SUFFIX $CANDIDATE_BEAUTIFIED.$SUFFIX; then
            $DIFF -u $CANDIDATE.$SUFFIX $CANDIDATE_BEAUTIFIED.$SUFFIX 1>&2
            $BEAUTIFY --version 1>&2
            echo "Commit rejected: File \"$cand\" does not comply to the coding standard." 1>&2
            DIFFER=true
        fi
        rm $CANDIDATE.$SUFFIX $CANDIDATE_BEAUTIFIED.$SUFFIX
    done
    rm $BEAUTIFY_CONFIG

    if [ -n "$DIFFER" ]; then
        echo "Commit rejected: Please run \"$BEAUTIFY_DIR/beautify\" and try again!" 1>&2
        exit 1
    fi
fi
#### Coding standard validation: end ###########################################


# All checks passed, so allow the commit.
exit 0
