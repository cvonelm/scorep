#include "SILC_Mpi.h"
#include "config.h"

/**
 * @file       SILC_Mpi_Spawn.c
 * @maintainer Daniel Lorenz <d.lorenz@fz-juelich.de>
 * @status     ALPHA
 * @ingroup    MPI_Wrapper
 *
 * @brief C interface wrappers for process creation and management
 *        functions (spawning interface)
 */

/**
 * @name C wrappers
 * @{
 */

#pragma wrapgen multiple restrict(gspawn+!n_name+!n_port+!ndisconnect+!n_parent) skel/SILC_Mpi_CommMgnt.w

#if HAVE(DECL_MPI_COMM_DISCONNECT) && ! defined(SILC_MPI_NO_SPAWN)
/**
 * Measurement wrapper for MPI_Comm_disconnect
 * @note Auto-generated by wrapgen from template: comm_mgnt.w
 * @note C interface
 * @note Introduced with MPI-2
 * @ingroup spawn
 * Triggers an enter and exit event.
 */
int MPI_Comm_disconnect(MPI_Comm* comm)
{
  const int event_gen_active = SILC_MPI_IS_EVENT_GEN_ON_FOR(SILC_MPI_ENABLED_SPAWN);
  int       return_val;

  if (event_gen_active)
  {
    SILC_MPI_EVENT_GEN_OFF();
    SILC_EnterRegion(silc_mpi_regid[SILC__MPI_COMM_DISCONNECT]);
  }

  silc_mpi_comm_free(*comm);
  return_val = PMPI_Comm_disconnect(comm);

  if (event_gen_active)
  {
    SILC_ExitRegion(silc_mpi_regid[SILC__MPI_COMM_DISCONNECT]);
    SILC_MPI_EVENT_GEN_ON();
  }

  return return_val;
}
#endif

#pragma wrapgen single MPI_Comm_get_parent skel/SILC_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_name) skel/SILC_Mpi_Std.w

#pragma wrapgen multiple restrict(gspawn+n_port) skel/SILC_Mpi_Std.w

/**
 * @}
 */
