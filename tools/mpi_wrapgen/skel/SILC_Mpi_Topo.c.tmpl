/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
**  KOJAK       http://www.fz-juelich.de/jsc/kojak/                        **
*****************************************************************************
**  Copyright (c) 1998-2009                                                **
**  Forschungszentrum Juelich, Juelich Supercomputing Centre               **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/

/**
 * @file  SILC_Mpi_Topo.c
 *
 * @brief C interface wrappers for topologies
 */

/**
 * @name C wrappers
 * @{
 */

/** 
 * Measurement wrapper for MPI_Cart_create
 * @note Manually adapted wrapper
 * @note C interface
 * @note Introduced with MPI-1
 * @ingroup topo
 */
int MPI_Cart_create(MPI_Comm  comm_old,
                    int       ndims,
                    int*      dims,
                    int*      periodv,
                    int       reorder,
                    MPI_Comm* comm_cart)
{
  const int event_gen_active = SILC_MPI_IS_EVENT_GEN_ON_FOR(TOPO);
  int       return_val;

  if (event_gen_active)
  {
    SILC_MPI_EVENT_GEN_OFF();
    SILC_EnterRegion(silc_mpi_regid[SILC__MPI_CART_CREATE]);
  }

  return_val = PMPI_Cart_create(comm_old, ndims, dims, periodv, reorder, comm_cart);

  if (*comm_cart != MPI_COMM_NULL)
  {
    int      topid, cid, my_rank, i;
    int*     coordv;
    elg_ui1  undims;
    elg_ui1* uperiodv;
    elg_ui4* udimv;
    elg_ui4* ucoordv;

    silc_mpi_comm_create(*comm_cart);
  
    /* NOTE: 
     * currently topid == cid during measurement */

    /* get the topid and cid */
    topid = cid = silc_mpi_comm_id(*comm_cart);

    /* find the rank of the calling process */
    PMPI_Comm_rank(*comm_cart, &my_rank); 
  
    /* assign the cartesian topology dimension parameters */
    undims  = (elg_ui1) ndims;
    udimv   = calloc(ndims, sizeof(elg_ui4));
    if (udimv == NULL)
    {
      SILC_ERROR_POSIX();
    }
    
    uperiodv = calloc(ndims, sizeof(elg_ui1));
    if (uperiodv == NULL)
    {
      SILC_ERROR_POSIX();
    }

    for (i = 0 ; i < ndims ; i++)
    {
      udimv[i]    =  (elg_ui4) dims[i];
      uperiodv[i] =  (elg_ui1) periodv[i];
    }
          
    /* create the cartesian topology definition record */
    esd_def_cart(topid, cid, undims, udimv, uperiodv);

    /* allocate space for coordv and ucoordv */
    coordv = calloc(ndims, sizeof(int));
    if (coordv == NULL)
    {
      SILC_ERROR_POSIX();
    }

    ucoordv = calloc(ndims, sizeof(elg_ui4));
    if (ucoordv == NULL)
    {
      SILC_ERROR_POSIX();
    }
                          
    /* get the coordinates of the calling process in coordv */
    PMPI_Cart_coords(*comm_cart, my_rank, ndims, coordv);

    /* assign the coordinates */
    for ( i = 0 ; i < ndims ; i++ )
    {
      ucoordv[i] = (elg_ui4) coordv[i];
    }
  
    /* create the coordinates definition record */
    esd_def_coords(topid, undims, ucoordv);               

    free(udimv);
    free(uperiodv);
    free(ucoordv);
  }

  if (event_gen_active)
  {
    SILC_ExitRegion(silc_mpi_regid[SILC__MPI_CART_CREATE]);
    SILC_MPI_EVENT_GEN_ON();
  }

  return return_val;
}

#pragma wrapgen single MPI_Cart_sub skel/SILC_Mpi_CommMgnt.w
#pragma wrapgen single MPI_Graph_create skel/SILC_Mpi_CommMgnt.w

#pragma wrapgen multiple restrict(gtopo+!ncreate+!nsub) skel/SILC_Mpi_Std.w

/**
 * @}
 */
