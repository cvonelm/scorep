/**
 * @file  SILC_Mpiwrap_Reg.h
 * @maintainer Daniel Lorenz <d.lorenz@fz-juelich.de>
 * @status     alpha
 * @ingroup    MPI_Wrapper
 *
 * @brief Registration of MPI functions
 * For all MPI functions a region is reistered at initialization time of the MPI adapter.
 * The dynamic region handle obtained from the measurement system is stored in an array
 * unter a fixed index for every region. 
 */

#ifndef _SILC_MPIWRAP_REG_H
#define _SILC_MPIWRAP_REG_H

#ifdef __cplusplus
#   define EXTERN extern "C" /**< External C definition*/
#else
#   define EXTERN extern     /**< External definition */
#endif

#include "SILC_Definitions.h"

/* 
 *-----------------------------------------------------------------------------
 *
 *  - Registration of MPI functions  
 *
 *-----------------------------------------------------------------------------
 */

/** function type is not point-to-point */
#define SILC_MPI_TYPE__NONE                          0
/** function type is receive operation */
#define SILC_MPI_TYPE__RECV                          1
/** function type is send operation */
#define SILC_MPI_TYPE__SEND                          2
/** function type is send and receive operation */
#define SILC_MPI_TYPE__SENDRECV                      3
/** function type is collective */
#define SILC_MPI_TYPE__COLLECTIVE                    4

/** function has is unknown communication pattern */
#define SILC_COLL_TYPE__UNKNOWN                      1
/** function is barrier-like operation */
#define SILC_COLL_TYPE__BARRIER                      2
/** function has 1:n communication pattern */
#define SILC_COLL_TYPE__ONE2ALL                      3
/** function has n:1 communication pattern */
#define SILC_COLL_TYPE__ALL2ONE                      4
/** function has n:n communication pattern */
#define SILC_COLL_TYPE__ALL2ALL                      5
/** function may be partially synchronizing */
#define SILC_COLL_TYPE__PARTIAL                      6
/** function is implicitely synchronizing */
#define SILC_COLL_TYPE__IMPLIED                      7

/**
 * Bitpatterns for runtime wrapper enabling
 */
enum silc_mpi_groups {
    /* pure groups, which can be specified in conf */
    SILC_MPI_ENABLED_CG        =     1,
    SILC_MPI_ENABLED_COLL      =     2,
    SILC_MPI_ENABLED_ENV       =     4,
    SILC_MPI_ENABLED_ERR       =     8,
    SILC_MPI_ENABLED_EXT       =    16,
    SILC_MPI_ENABLED_IO        =    32,
    SILC_MPI_ENABLED_MISC      =    64,
    SILC_MPI_ENABLED_P2P       =   128,
    SILC_MPI_ENABLED_RMA       =   256,
    SILC_MPI_ENABLED_SPAWN     =   512,
    SILC_MPI_ENABLED_TOPO      =  1024,
    SILC_MPI_ENABLED_TYPE      =  2048,
    SILC_MPI_ENABLED_PERF      =  4096,
    SILC_MPI_ENABLED_XNONBLOCK =  8192,
    /* derived groups, which are a combination of existing groups */
    SILC_MPI_ENABLED_CG_ERR    =  SILC_MPI_ENABLED_CG    | SILC_MPI_ENABLED_ERR,
    SILC_MPI_ENABLED_CG_EXT    =  SILC_MPI_ENABLED_CG    | SILC_MPI_ENABLED_EXT,
    SILC_MPI_ENABLED_CG_MISC   =  SILC_MPI_ENABLED_CG    | SILC_MPI_ENABLED_MISC,
    SILC_MPI_ENABLED_IO_ERR    =  SILC_MPI_ENABLED_IO    | SILC_MPI_ENABLED_ERR,
    SILC_MPI_ENABLED_IO_MISC   =  SILC_MPI_ENABLED_IO    | SILC_MPI_ENABLED_MISC,
    SILC_MPI_ENABLED_RMA_ERR   =  SILC_MPI_ENABLED_RMA   | SILC_MPI_ENABLED_ERR,
    SILC_MPI_ENABLED_RMA_EXT   =  SILC_MPI_ENABLED_RMA   | SILC_MPI_ENABLED_EXT,
    SILC_MPI_ENABLED_RMA_MISC  =  SILC_MPI_ENABLED_RMA   | SILC_MPI_ENABLED_MISC,
    SILC_MPI_ENABLED_TYPE_EXT  =  SILC_MPI_ENABLED_TYPE  | SILC_MPI_ENABLED_EXT,
    SILC_MPI_ENABLED_TYPE_MISC =  SILC_MPI_ENABLED_TYPE  | SILC_MPI_ENABLED_MISC,
    /* NOTE: ALL should comprise all pure groups */
    SILC_MPI_ENABLED_ALL       =  SILC_MPI_ENABLED_CG    |
                                  SILC_MPI_ENABLED_COLL  |
                                  SILC_MPI_ENABLED_ENV   |
                                  SILC_MPI_ENABLED_ERR   |
                                  SILC_MPI_ENABLED_EXT   |
                                  SILC_MPI_ENABLED_IO    |
                                  SILC_MPI_ENABLED_MISC  |
                                  SILC_MPI_ENABLED_P2P   |
                                  SILC_MPI_ENABLED_RMA   |
                                  SILC_MPI_ENABLED_SPAWN |
                                  SILC_MPI_ENABLED_TOPO  |
                                  SILC_MPI_ENABLED_TYPE  |
                                  SILC_MPI_ENABLED_PERF  |
                                  SILC_MPI_ENABLED_XNONBLOCK, 
    /* NOTE: DEFAULT should reflect the default set in 'epk_conf.c' */
    SILC_MPI_ENABLED_DEFAULT   =  SILC_MPI_ENABLED_CG    |
                                  SILC_MPI_ENABLED_COLL  |
                                  SILC_MPI_ENABLED_ENV   |
                                  SILC_MPI_ENABLED_IO    |
                                  SILC_MPI_ENABLED_P2P   |
                                  SILC_MPI_ENABLED_RMA   |
                                  SILC_MPI_ENABLED_TOPO 
};                                                     
                                                       
/** Bit vector for runtime measurement wrapper enabling/disabling */
EXTERN uint64_t silc_mpi_enabled;

#pragma wrapgen multiple restrict() skel/SILC_Mpi_RegH.w

/** Number of MPI functions HAVE */
#define SILC__MPI_NUMFUNCS                         311

/** Artificial root for MPI-only experiments when no user-code
 * instrumenation is available */
#define SILC_PARALLEL__MPI           SILC__MPI_NUMFUNCS

/** Region IDs of MPI functions */
EXTERN SILC_RegionHandle silc_mpi_regid[SILC__MPI_NUMFUNCS+1];

/**
 * Register MPI functions and initialize data structures
 */
EXTERN void silc_mpi_register_regions();

EXTERN uint8_t silc_is_mpi_collective(const char* str);
EXTERN uint8_t silc_is_mpi_point2point(const char* str);
EXTERN uint8_t silc_mpi_eventtype(const char* str);

/**
 * Enable measurement for specific subgroups of MPI functions
 */
EXTERN void    silc_mpi_enable_init();

#endif
