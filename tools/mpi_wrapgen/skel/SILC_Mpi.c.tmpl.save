/****************************************************************************
**  SCALASCA    http://www.scalasca.org/                                   **
**  KOJAK       http://www.fz-juelich.de/jsc/kojak/                        **
*****************************************************************************
**  Copyright (c) 1998-2009                                                **
**  Forschungszentrum Juelich, Juelich Supercomputing Centre               **
**                                                                         **
**  Copyright (c) 2003-2008                                                **
**  University of Tennessee, Innovative Computing Laboratory               **
**                                                                         **
**  See the file COPYRIGHT in the package base directory for details       **
****************************************************************************/
#include "epk_mpicom.h"
#include "SILC_Mpi_Reg.h"
#include "SILC_Mpi_Req.h"

#include "elg_error.h"

#include "esd_def.h"
#include "esd_event.h"
#include "esd_run.h"

#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>

static MPI_Status *my_status_array = 0;
static int my_status_array_size = 0;

static MPI_Status* epk_get_status_array(int size) {
  if (my_status_array_size == 0) {
    /* -- never used: initialize -- */
    my_status_array = malloc(size * sizeof(MPI_Status));
    if ( my_status_array == NULL ) elg_error();
    my_status_array_size = size;
  } else if (size > my_status_array_size) {
    /* -- not enough room: expand -- */
    my_status_array = realloc(my_status_array, size * sizeof(MPI_Status));
    if ( my_status_array == NULL ) elg_error();
    my_status_array_size = size;
  }
  return my_status_array;
}

int epk_mpi_nogen = 0;

#define IS_EVENT_GEN_ON            (!epk_mpi_nogen)
#define SILC_MPI_IS_EVENT_GEN_ON_FOR(group) ((!epk_mpi_nogen) && (epk_mpi_enabled & EPK_MPI_ENABLED_##group))
#define SILC_MPI_EVENT_GEN_OFF()     epk_mpi_nogen = 1
#define SILC_MPI_EVENT_GEN_ON()      epk_mpi_nogen = 0

/**
 *-----------------------------------------------------------------------------
 *
 * @name External interfaces
 * 
 *-----------------------------------------------------------------------------
 * @{ 
 */

#include "SILC_Mpi_Ext.c"

#pragma wrapgen multiple restrict(gfor) skel/SILC_Mpi_Std.w

#pragma wrapgen multiple restrict(glang) skel/SILC_Mpi_Std.w

#pragma wrapgen multiple restrict(gmisc) skel/SILC_Mpi_Std.w

/**
 * @}
 *-----------------------------------------------------------------------------
 *
 * @name Communicator management
 *
 *-----------------------------------------------------------------------------
 * @{
 */

#include "epk_mpiwrap_gcc.c"

/*
 *-----------------------------------------------------------------------------
 *
 * Cartesian Toplogy functions
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Topo.c"

/**
 * @}
 *-----------------------------------------------------------------------------
 *
 * Point-to-point communication
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_P2p.c"

/**
 * @}
 */

/*
 *-----------------------------------------------------------------------------
 *
 * Collective communication
 *
 *-----------------------------------------------------------------------------
 */

#include "SILC_Mpi_Coll.c"

/*
 * Should the RMA functions be included?
 */
#ifdef HAS_MPI2_1SIDED
#include "SILC_Mpi_Rma.c"
#endif

/*
 * Should the IO functions be included?
 */
#ifdef HAS_MPI2_IO
#include "SILC_Mpi_Io.c"
#endif

/*
 * Should the process management functions be included?
 */
#ifdef HAS_MPI2_PROC
#include "epk_mpiwrap_proc.c"
#endif
